#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct node {
    int data;
    struct node *leftchild;
    struct node *rightchild;
};

struct node *root = NULL;

void insert(int data)
{
    struct node *tempnode = (struct node *)malloc(sizeof(struct node));
    struct node *current;
    struct node *parent;
    tempnode->data = data;
    tempnode->leftchild = NULL;
    tempnode->rightchild = NULL;
    if(root==NULL)
    {
        root = tempnode;
    }
    else
    {
        current = root;
        parent = NULL;
        while(1)
        {
            parent = current;
            if(data<parent->data)
            {
               current = current->leftchild;
               if(current==NULL)
               {
                   parent->leftchild = tempnode;
                   return;
               }
            }
            else
            {
                current = current->rightchild;
                if(current==NULL)
                {
                    parent->rightchild = tempnode;
                    return;
                }
            }
        }
    }
}

void inorder(struct node *root)
{
    if(root!=NULL)
    {
        inorder(root->leftchild);
        printf("%d ",root->data);
        inorder(root->rightchild);
    }
}

void preorder(struct node *root)
{
    if(root!=NULL)
    {
        printf("%d ",root->data);
        preorder(root->leftchild);
        preorder(root->rightchild);
    }
}

void postorder(struct node *root)
{
    if(root!=NULL)
    {
        postorder(root->leftchild);
        postorder(root->rightchild);
        printf("%d ",root->data);
    }
}

int main()
{
    int n;
    scanf("%d",&n);
    int arr[n];
    for(int i=0;i<n;i++)
    {
        scanf("%d",&arr[i]);
    }
    for(int i=0;i<n;i++)
    {
        insert(arr[i]);
    }
    printf("Inorder traversal\n");
    inorder(root);
    printf("\n");
    printf("Preorder traversal\n");
    preorder(root);
    printf("\n");
    printf("Postorder traversal\n");
    postorder(root);
    return 0;
}