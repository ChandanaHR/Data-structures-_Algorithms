import java.io.*;
import java.util.*;
import java.lang.*;

class Edge {
    int source;
    int destination;
    int weight;
    Edge(int s,int d,int w) {
        source = s;
        destination = d;
        weight = w;
    }
}

public class Main {
    public static void creategraph(ArrayList<Edge> graph[],int v) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the source vertex");
        int src = sc.nextInt();
        System.out.println("Enter the destination vertex");
        int dest = sc.nextInt();
        System.out.println("Enter the weight from source vertex to destination vertex");
        int wei = sc.nextInt();
        graph[src].add(new Edge(src,dest,wei));
    }
    public static void display(ArrayList<Edge> graph[],int v) {
        for(int i=0;i<v;i++) {
            for(int j=0;j<graph[i].size();j++) {
                Edge e = graph[i].get(j);
                System.out.print(e.source+"->"+e.destination+"->weight " +e.weight+" ");
            }
            System.out.println();
        }
    }
    public static void bellmannford(ArrayList<Edge> graph[],int v,int current) {
        int distance[] = new int[v];
        for(int i=0;i<v;i++) {
            if(i!=current) {
                distance[i] = Integer.MAX_VALUE;
            } 
        }
        for(int k=0;k<v-1;k++) {
            for(int i=0;i<v;i++) {
                for(int j=0;j<graph[i].size();j++) {
                    Edge e = graph[i].get(j);
                    int u = e.source;
                    int w = e.destination;
                    if(distance[u]!=Integer.MAX_VALUE && distance[u]+e.weight<distance[w]) {
                        distance[w] = distance[u]+e.weight;
                    }
                }
            }
        }
        for(int i=0;i<v;i++) {
            System.out.print(distance[i]+" ");
        }
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int v = sc.nextInt();
        ArrayList<Edge> graph[] = new ArrayList[v];
        for(int i=0;i<v;i++) {
            graph[i] = new ArrayList<>();
        }
        while(true) {
            System.out.println("Enter the choice");
            int choice = sc.nextInt();
            switch(choice) {
                case 1 : creategraph(graph,v);
                         break;
                case 2 : display(graph,v);
                         break;
                case 3 : System.out.println("Enter the starting vertex");
                         int curr = sc.nextInt();
                         bellmannford(graph,v,curr);
                         break;
                case 4 : System.exit(0);
                default: System.out.println("Invalid choice");
            }
        }
    }
}