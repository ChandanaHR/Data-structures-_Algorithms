import java.io.*;
import java.util.*;
import java.lang.*;

class weightedge {
    int source;
    int destination;
    int weight;
    weightedge(int s,int d,int w) {
        source = s;
        destination = d;
        weight = w;
    }
}

class Pair implements Comparable<Pair> {
    int node;
    int distance;
    Pair(int n,int dis) {
        node = n;
        distance = dis;
    }
    @Override
    public int compareTo(Pair p2) {
        return distance - p2.distance;
    }
}

public class Main {
    public static void creategraph(ArrayList<weightedge> graph[],int v) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the source vertex");
        int src = sc.nextInt();
        System.out.println("Enter the destination vertex");
        int dest = sc.nextInt();
        System.out.println("Enter the weight value from source to destination vertex");
        int wt = sc.nextInt();
        graph[src].add(new weightedge(src,dest,wt));
    }
    public static void display(ArrayList<weightedge> graph[],int v) {
        for(int i=0;i<v;i++) {
            for(int j=0;j<graph[i].size();j++) {
                weightedge e = graph[i].get(j);
                System.out.print(e.source+"->"+e.destination+"->"+e.weight+" ");
            }
            System.out.println();
        }
    }
    public static void dijkstra(ArrayList<weightedge> graph[],int v,int current) {
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        pq.add(new Pair(current,0));
        boolean visited[] = new boolean[v];
        int dist[] = new int[v];
        for(int i=0;i<v;i++) {
            if(i!=current) {
                dist[i] = Integer.MAX_VALUE;
            }
        }
        while(!pq.isEmpty()) {
            Pair recent = pq.remove();
            if(!visited[recent.node]) {
                visited[recent.node] = true;
                for(int j=0;j<graph[recent.node].size();j++) {
                    weightedge e = graph[recent.node].get(j);
                    int u = e.source;
                    int w = e.destination;
                    if(dist[u]+e.weight < dist[w]) {  //Relaxation condition
                        dist[w] = dist[u]+e.weight;
                        pq.add(new Pair(w,dist[w]));
                    }
                }
            }
        }
        for(int i=0;i<v;i++) {
            System.out.print(dist[i]+" ");
        }
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int v = sc.nextInt();
        ArrayList<weightedge> graph[] = new ArrayList[v];
        for(int i=0;i<v;i++) {
            graph[i] = new ArrayList<>();
        }
        while(true) {
            System.out.println("Enter the choice");
            int choice = sc.nextInt();
            switch(choice) {
                case 1 : creategraph(graph,v);
                         break;
                case 2 : display(graph,v);
                         break;
                case 3 : System.out.println("Enter the current vertex");
                         int curr = sc.nextInt();
                         dijkstra(graph,v,curr);
                         break;
                case 4 : System.exit(0);
                default: System.out.println("Invalid choice");
            }
        }
    }
}