import java.io.*;
import java.util.*;
import java.lang.*;

class Edge {
    int source;
    int destination;
    int weight;
    Edge(int s,int d,int w) {
        source = s;
        destination = d;
        weight = w;
    }
}

class Pair implements Comparable<Pair> {
    int node;
    int cost;
    Pair(int n,int c) {
        node = n;
        cost = c;
    }
    @Override public int compareTo(Pair p2) {
        return cost-p2.cost;
    }
}

public class Main {
    public static void creategraph(ArrayList<Edge> graph[],int v) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the source vertex");
        int src = sc.nextInt();
        System.out.println("Enter the destination vertex");
        int dest = sc.nextInt();
        System.out.println("Enter the weight from source to destination vertex");
        int wei = sc.nextInt();
        graph[src].add(new Edge(src,dest,wei));
        graph[dest].add(new Edge(dest,src,wei));
    }
    public static void display(ArrayList<Edge> graph[],int v) {
        for(int i=0;i<v;i++) {
            for(int j=0;j<graph[i].size();j++) {
                Edge e = graph[i].get(j);
                System.out.print(e.source+"->"+e.destination+"->weight "+e.weight+" ");
            }
            System.out.println();
        }
    }
    public static void primsalgorithm(ArrayList<Edge> graph[],int v,int curr) {
        PriorityQueue<Pair> pq = new PriorityQueue<>();  //node and cost(weight) Non mst set
        boolean visited[] = new boolean[v];  //mst set
        pq.add(new Pair(curr,0));
        int finalcost = 0;
        while(!pq.isEmpty()) {
            Pair first = pq.remove();
            if(!visited[first.node]) {
                visited[first.node] = true;
                finalcost+=first.cost;
                for(int i=0;i<graph[first.node].size();i++) {
                    Edge e = graph[first.node].get(i);
                    if(!visited[e.destination]) {
                        pq.add(new Pair(e.destination,e.weight));
                    }
                }
            }
        }
        System.out.println("MST cost:" +finalcost);
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int v = sc.nextInt();
        ArrayList<Edge> graph[] = new ArrayList[v];
        for(int i=0;i<v;i++) {
            graph[i] = new ArrayList<>();
        }
        while(true) {
            System.out.println("Enter the choice");
            int choice = sc.nextInt();
            switch(choice) {
                case 1 : creategraph(graph,v);
                         break;
                case 2 : display(graph,v);
                         break;
                case 3 : System.out.println("Enter the current vertex");
                         int current = sc.nextInt();
                         primsalgorithm(graph,v,current);
                         break;
                case 4 : System.exit(0);
                default: System.out.println("Invalid choice");
            }
        }
    }
}