//Cycle detection in directed graph using dfs

import java.io.*;
import java.util.*;
import java.lang.*;

class Edge {
    int source;
    int destination;
    Edge(int src,int dest) {
        source = src;
        destination = dest;
    }
}

public class Main {
    public static void creategraph(ArrayList<Edge> graph[],int v) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the source vertex");
        int s = sc.nextInt();
        System.out.println("Enter the destination vertex");
        int d = sc.nextInt();
        graph[s].add(new Edge(s,d));
    }
    public static void display(ArrayList<Edge> graph[],int v) {
        for(int i=0;i<v;i++) {
            for(int j=0;j<graph[i].size();j++) {
                Edge e = graph[i].get(j);
                System.out.print(i+"->"+e.destination+" ");
            }
            System.out.println();
        }
    }
    public static boolean detectcycle(ArrayList<Edge> graph[],int v,int current,boolean visited[],boolean recurstack[]) {
        visited[current] = true;
        recurstack[current] = true;
        for(int i=0;i<graph[current].size();i++) {
            Edge e = graph[current].get(i);
            if(recurstack[e.destination]==true) {
                return true;
            }
            else if(!visited[e.destination]) {
                if(detectcycle(graph,v,e.destination,visited,recurstack)) {
                    return true;
                }
            }
        }
        recurstack[current] = false;
        return false;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int v = sc.nextInt();
        ArrayList<Edge> graph[] = new ArrayList[v];
        for(int i=0;i<v;i++) {
            graph[i] = new ArrayList<>();
        }
        while(true) {
            System.out.println("Enter the choice");
            int choice = sc.nextInt();
            switch(choice) {
                case 1 : creategraph(graph,v);
                         break;
                case 2 : display(graph,v);
                         break;
                case 3 : System.out.println("Enter the start vertex");
                         int curr = sc.nextInt();
                         System.out.println(detectcycle(graph,v,curr,new boolean[v],new boolean[v]));
                         break;
                case 4 : System.exit(0);
                default: System.out.println("Invalid choice");
            }
        }
    }
}