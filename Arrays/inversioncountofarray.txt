#Merge sort algorithm Time complexity - O(nlogn)
import java.io.*;
import java.util.*;
import java.lang.*;

public class Main {
    public static void merge(int arr[],int lowerb,int mid,int upperb)
    {
        int n1 = mid-lowerb+1;
        int n2 = upperb-mid;
        int leftarr[] = new int[n1];
        int rightarr[] = new int[n2];
        for(int i=0;i<n1;i++)
        {
            leftarr[i] = arr[lowerb+i];
        }
        for(int j=0;j<n2;j++)
        {
            rightarr[j] = arr[mid+1+j];
        }
        int i=0,j=0,k=lowerb;
        while(i<n1 && j<n2)
        {
            if(leftarr[i]<=rightarr[j])
            {
                arr[k] = leftarr[i];
                k++;
                i++;
            }
            else
            {
                arr[k] = rightarr[j];
                k++;
                j++;
            }
        }
        while(i<n1)
        {
            arr[k] = leftarr[i];
            k++;
            i++;
        }
        while(j<n2)
        {
            arr[k] = rightarr[j];
            k++;
            j++;
        }
    }
    public static void mergesort(int arr[],int lowerb,int upperb)
    {
        if(lowerb<upperb)
        {
            int mid = lowerb+(upperb-lowerb)/2;
            mergesort(arr,lowerb,mid);
            mergesort(arr,mid+1,upperb);
            merge(arr,lowerb,mid,upperb);
        }
    }
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int arr[] = new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i] = sc.nextInt();
        }
        mergesort(arr,0,n-1);
        System.out.println();
        for(int i=0;i<n;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}


class Solution
{
    // arr[]: Input Array
    // N : Size of the Array arr[]
    //Function to count inversions in the array.
    static long inversionCount(long arr[], long N)
    {
        return mergeSort(arr,0,(int)N-1);
    }
    
    private static long mergeSort(long[] arr, int l, int h)
    {
        if(l<h)
        {
            int mid=l+(h-l)/2;
            long l1=mergeSort(arr,l,mid);
            long l2=mergeSort(arr,mid+1,h);
            long l3=merge(arr,l,mid,h);
            //System.out.println("l1: "+l1+", l2: "+l2+", l3: "+l3);
            return (l1+l2+l3);
        }
        else return 0;
    }
    
    private static long merge(long[] arr, int l, int mid, int h)
    {
        long[] b=new long[h-l+1];
        int i=l, j=mid+1, k=0;
        long count=0;
        
        while(i<=mid && j<=h)
        {
            if(arr[i]>arr[j])
            {
                b[k++]=arr[j++];
                count+=(mid-i+1);
            }
            else
            {
                b[k++]=arr[i++];
            }
        }
        
        while(i<=mid)
        {
            b[k++]=arr[i++];
        }
        
        while(j<=h)
        {
            b[k++]=arr[j++];
        }
        
        int t=l;
        for(k=0;k<b.length;k++)
        {
            arr[t++]=b[k];
        }
        
        return count;
    }
}
