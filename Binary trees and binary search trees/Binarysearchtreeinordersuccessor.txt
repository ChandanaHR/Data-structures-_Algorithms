import java.io.*;
import java.util.*;
import java.lang.*;

class Node {
    int data;
    Node left,right;
    Node(int key) {
        data = key;
        left=right=null;
    }
}

class Binarysearchtree {
    Node root;
    Binarysearchtree()
    {
        root = null;
    }
    public void insert(int item) {
        root = insertpos(root,item);
    }
    public Node insertpos(Node root,int item)
    {
        if(root == null) {
            root = new Node(item);
        }
        if(item<root.data) {
            root.left = insertpos(root.left,item);
        }
        else if(item>root.data) {
            root.right = insertpos(root.right,item);
        }
        return root;
    }
    public void inorder()
    {
        inorderpos(root);
    }
    public void inorderpos(Node root) 
    {
        if(root!=null) {
            inorderpos(root.left);
            System.out.print(root.data+" ");
            inorderpos(root.right);
        }
    }
    public void inordersuccessor(int k)
    {
        int element = inordersuccessorpos(root,k);
        System.out.println();
        System.out.println(element);
    }
    public int inordersuccessorpos(Node root,int k)
    {
        Stack<Node> stack = new Stack<>();
        while(root!=null || !stack.isEmpty()) {
            while(root!=null) {
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            if(root.data>k) {
                return root.data;
            }
            root = root.right;
        }
        return -1;
    }
}

public class Main {
    public static void main(String[] args)
    {
        Binarysearchtree bst = new Binarysearchtree();
        
        bst.insert(20);
        bst.insert(8);
        bst.insert(22);
        bst.insert(4);
        bst.insert(12);
        bst.insert(10);
        bst.insert(14);
        
        bst.inorder();
        
        bst.inordersuccessor(10);
    }
}